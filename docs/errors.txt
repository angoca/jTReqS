IMPORTANCE means the level of criticity of the error: High, Medium, Low


ERROR:
JRE 32 bits.

OUTPUT:
Error loading library. /afs/in2p3.fr/home/g/gomez/jtreqs-server/bin/libHPSSJNIBridge.so: /afs/in2p3.fr/home/g/gomez/jtreqs-server/bin/libHPSSJNIBridge.so: wrong ELF class: ELFCLASS64 (Possible cause: architecture word width mismatch)

LOCATION:
Standard output or logs.

IMPORTANCE:
High.

DESCRIPTION:
The Java Runtime environment that is currently used is not compatible with the Native library to access HPSS. The library is compiled in 64 bits.
Please, check that your current JRE is also 64 bits and not 32 bits.
This is important to communicate with HPSS. The native library is compiled in
64 bits, then, it is necessary to run the java virtual machine in 64 bits.

SOLUTION:
Try to reload the environment calling the script:
java6_env
This script will load a good JRE to execute the application.

-----

ERROR:
Logback cannot write in the destination file

OUTPUT:
ERROR in ch.qos.logback.core.rolling.RollingFileAppender[TraceFile] - openFile(/var/log/jtreqs/jtreqs-trace.log,true) call failed.java.io.FileNotFoundException: /var/log/jtreqs/jtreqs-trace.log (Permission denied)
    at java.io.FileNotFoundException: /var/log/jtreqs/jtreqs-trace.log (Permission denied)
    at  at java.io.FileOutputStream.openAppend(Native Method)

LOCATION:
Standard output or logs.

IMPORTANCE:
Medium.

DESCRIPTION:
The application is trying to writes the logs in a location where it does not
have enough rights to write.
The application can continue to work, but there will not be any log in disk,
just in the console (standard output) and this will be difficult in order to
detect any problem.

SOLUTION:
Try to change the rights of the directory or existing files, in order to permit
the user that is executing the application can write there.

OR

Modify the loback.xml file changing the directory for the output of both log
files.
This file can be found at {app-ins}/etc

-----

ERROR:
There are not drives defined in the database.

OUTPUT:
WARN  f.i.c.s.t.p.m.d.MySQLConfigurationDAO - No drives (media type) found. Please define them in the database.

LOCATION:
Standard output or logs.

IMPORTANCE:
High.

DESCRIPTION:
The database contains the information of the quantity of drives per type are
available for the application. This information is vital to select a queue
(a tape) and activate it (mount the tape in a drive). Without this information,
the application will not activate any tape, then, the files will not be staged.

SOLUTION:
Insert in the database the available drives for the application. This can be
done via:

INSERT INTO jmediatypes VALUES ('1', 'T10K-A', 5);
-----

ERROR:
There are not drive allocations defined in the database.

OUTPUT:
WARN  f.i.c.s.t.p.m.d.MySQLConfigurationDAO - No media type allocations found. Please define them in the database.

LOCATION:
Standard output or logs.

IMPORTANCE:
High.

DESCRIPTION:
In order to work the application with fair-share, there must be defined in the
database the minimal quantity of drives per user.
Without this information, the fair-share is not possible, and all users will
have treated in the same way, all of them are equal.

SOLUTION:
Insert in the database the corresponding allocation per user. This can be done
like this:

INSERT INTO jallocations VALUES (1, 'atlagrid', 0.2)

The last column is the percentage of the total quantity of drives that are
reserved for that user.
