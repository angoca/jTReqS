
UPDATE requests SET status = 16 WHERE status BETWEEN 10 AND 12



-- Trigger for current database TReqS 1.0
drop trigger if exists t1;

drop trigger if exists replicateNewRequestsBefore;
drop trigger if exists replicateNewRequestsAfter;

\d @

-- Changes the request before insertion.
create trigger replicateNewRequestsBefore before insert on requests for each row
begin
    if new.user = "xrdmgr" then
        set new.status := 11 ;
        set new.message := "Requests replicated for jTReqS 1.5";
    elseif new.hpss_file in (select file from blacklist) then
        set new.status := 16;
        set new.message := "Problem in tape";
    end if;
end@

-- Replicates the Request.
create trigger replicateNewRequestsAfter after insert on requests for each row
begin
    insert into jrequests \
            (id, \
            file, \
            creation_time, \
            user, \
            client, \
            email, \
            version) \
        values (new.id, \
            new.hpss_file, \
            now(), \
            new.user, \
            new.client, \
            new.email, \
            'Trigger 1.0');
end@

\d ;


-- Trigger for new database jTReqS 1.5

drop trigger if exists updateRequests;

\d @

-- Replicates the modification of the request.
create trigger updateRequests before update on jrequests for each row
begin
    declare currentStatus smallint;
    if new.status = 150 then
        set currentStatus := 19;
    else
        set currentStatus := new.status / 10;
    end if;
    update requests set \
            queue_id = new.queue_id, \
            cartridge = new.tape, \
            position = new.position, \
            cos = new.level, \
            size = new.size, \
            tries = new.tries, \
            errorcode = new.errorcode, \
            submission_time = new.submission_time, \
            queued_time = new.queued_time, \
            end_time = new.end_time, \
            status = currentStatus, \
            message = new.message \
            where id = new.id;
end@

\d ;

drop trigger if exists updateQueues;

\d @

-- Replicates the modification of the request.
create trigger updateQueues after update on jqueues for each row
begin
    update queues set \
            nbjobs = new.nb_reqs, \
            nbdone = new.nb_reqs_done, \
            nbfailed = new.nb_reqs_failed, \
            status = new.status / 10, \
            master_queue = new.mediatype_id, \
            owner = new.owner, \
            creation_time = new.creation_time, \
            activation_time = new.activation_time, \
            end_time = new.end_time, \
            byte_size = new.byte_size \
            where id = new.id;
end@

\d ;

drop trigger if exists insertQueues;

\d @

-- Replicates the modification of the request.
create trigger insertQueues after insert on jqueues for each row
begin
    insert into queues (\
            id, \
            name, \
            nbjobs, \
            nbdone, \
            nbfailed, \
            status, \
            master_queue, \
            owner, \
            creation_time, \
            activation_time, \
            end_time, \
            byte_size \
        ) values ( \
            new.id, \
            new.name, \
            new.nb_reqs, \
            new.nb_reqs_done, \
            new.nb_reqs_failed, \
            new.status / 10, \
            new.mediatype_id, \
            new.owner, \
            new.creation_time, \
            new.activation_time, \
            new.end_time, \
            new.byte_size);
end@

\d ;




insert into requests (hpss_file, status, user, client) values ('file2', 10, "angoca", "localhost");

update jrequests set submission_time = now(), message = 'hola2' where id = 40;

select * from requests where id >= 81240;

INSERT INTO jqueues(status, name, nb_reqs, mediatype_id, owner, byte_size, creation_time) VALUES (200, "ITABCD", 0, 1, "andres", 0, now());

update jqueues set nb_reqs = 1 where id = 14;

select * from jqueues;

(while read x ; do echo $RANDOM $x ; done) < IT6575 | sort -n | tail -10 | awk '{print $2,"."}'
