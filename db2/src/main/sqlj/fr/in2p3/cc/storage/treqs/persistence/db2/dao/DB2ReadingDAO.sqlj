/*
 * Copyright      Jonathan Schaeffer 2009-2010,
 *                  CC-IN2P3, CNRS <jonathan.schaeffer@cc.in2p3.fr>
 * Contributors   Andres Gomez,
 *                  CC-IN2P3, CNRS <andres.gomez@cc.in2p3.fr>
 *
 * This software is a computer program whose purpose is to schedule, sort
 * and submit file requests to the hierarchical storage system HPSS.
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights, and the successive licensors have only limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
package fr.in2p3.cc.storage.treqs.persistence.db2.dao;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ExecutionContext;
import fr.in2p3.cc.storage.treqs.TReqSException;
import fr.in2p3.cc.storage.treqs.model.Reading;
import fr.in2p3.cc.storage.treqs.model.RequestStatus;
import fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO;
import fr.in2p3.cc.storage.treqs.persistence.db2.DB2Broker;
import fr.in2p3.cc.storage.treqs.persistence.db2.DB2Statements;
import fr.in2p3.cc.storage.treqs.persistence.db2.exception.DB2ExecuteException;
import fr.in2p3.cc.storage.treqs.persistence.helper.PersistenceHelperFileRequest;

/**
 * Manage the Reading object inserts and updates to DB2 database.
 *
 * @author Andres Gomez
 * @since 1.5.6
 */
public final class DB2ReadingDAO implements ReadingDAO {

	/**
	 * Logger.
	 */
	private static final Logger LOGGER = LoggerFactory
			.getLogger(DB2ReadingDAO.class);

	// Declare a user context class.
	#sql static context UserContext;
	/**
	 * Connection context.
	 */
	private UserContext ctx;

	// Declare the iterator (Named) for the requests.
	#sql static iterator IterReqs (int id, String user, String file, byte tries);
	/**
	 * Iterator for the list of requests.
	 */
	private IterReqs iterReqs = null;

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO#firstUpdate(fr.in2p3.cc
	 * .storage.treqs.model.Reading, java.lang.String)
	 */
	@Override
	public void firstUpdate(final Reading/* ! */reading,
			final String/* ! */message) throws TReqSException {
		LOGGER.trace("> firstUpdate");

		// XXX Bug: assert reading != null;
		// XXX Bug: assert (message != null) && !message.equals("");

		final short statusId = reading.getRequestStatus().getId();
		final int queueId = reading.getQueue().getId();
		final String tapename = reading.getMetaData().getTape().getName();
		final int position = reading.getMetaData().getPosition();
		final long size = reading.getMetaData().getFile().getSize();
		final String filename = reading.getMetaData().getFile().getName();
		final short stagedId = RequestStatus.STAGED.getId();

		final ExecutionContext execCtx = new ExecutionContext();
		SQLWarning sqlWarn;

		/*,
			    
		 */
		try {
			ctx = new UserContext(DB2Broker.getInstance().getConnection());
			#sql [ctx, execCtx] { UPDATE DATA.REQUESTS SET STATUS = :statusId,
			    MESSAGE = :message, QUEUE_ID = :queueId, "TAPE" = :tapename,
			    POSITION = :position, LEVEL = 0, SIZE = :size, ERRORCODE = 0,
			    SUBMISSION_TIME = CURRENT TIMESTAMP WHERE "FILE" = :filename AND
			    STATUS < :stagedId };
			if ((sqlWarn = execCtx.getWarnings()) != null) {
				LOGGER.warn("SQL Warning", sqlWarn);
			}

			if (execCtx.getUpdateCount() <= 0) {
				LOGGER.warn("Nothing updated");
			}
		} catch (final SQLException ex) {
			LOGGER.error("Error updating request " + queueId);
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		LOGGER.trace("< firstUpdate");
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO#getNewRequests(int)
	 */
	@Override
	public List<PersistenceHelperFileRequest>/* <!>! */getNewRequests(int limit)
			throws TReqSException {
		LOGGER.trace("> getNewRequests");

		// XXX Bug: assert limit >= 0;

		final List<PersistenceHelperFileRequest> newRequests = new ArrayList<PersistenceHelperFileRequest>();

		final short createdId = RequestStatus.CREATED.getId();
		final ExecutionContext execCtx = new ExecutionContext();
		SQLWarning sqlWarn;

		try {
			ctx = new UserContext(DB2Broker.getInstance().getConnection());
			execCtx.setFetchSize(limit);
			#sql [ctx, execCtx] iterReqs = { SELECT ID, "USER", FILE, TRIES FROM
			    DATA.REQUESTS WHERE STATUS = :createdId FOR READ ONLY };
			if ((sqlWarn = execCtx.getWarnings()) != null) {
				LOGGER.warn("SQL Warning", sqlWarn);
			}

			// Store result
			while (iterReqs.next()) {
				final int id = iterReqs.id();
				final String user = iterReqs.user();
				final String fileName = iterReqs.file();
				final byte tries = iterReqs.tries();
				final PersistenceHelperFileRequest fileRequest = new PersistenceHelperFileRequest(
						id, fileName, tries, user);
				newRequests.add(fileRequest);
			}
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				if (iterReqs != null) {
					iterReqs.close();
				}
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		// XXX Bug: assert newRequests != null;

		LOGGER.trace("< getNewRequests");

		return newRequests;
	}

	/**
	 * Fills the statement and execute it.
	 *
	 * @param reading
	 *            Request to update.
	 * @param status
	 *            Status of the reading.
	 * @param statement
	 *            Statement to fill and execute.
	 * @param i
	 *            Index of the statement.
	 * @throws DB2ExecuteException
	 *             If there is a problem executing the query.
	 */
	private void processUpdate(final Reading reading,
			final RequestStatus status, final PreparedStatement statement,
			final int i) throws DB2ExecuteException {
		LOGGER.trace("> processUpdate");

		// XXX Bug: assert reading != null;
		// XXX Bug: assert status != null;
		// XXX Bug: assert statement != null;
		// XXX Bug: assert i > 0;

		try {
			final short statusId = status.getId();
			final int queueId = reading.getQueue().getId();
			final String tapename = reading.getMetaData().getTape().getName();
			final int position = reading.getMetaData().getPosition();
			final String filename = reading.getMetaData().getFile().getName();
			final byte nbTries = reading.getNumberOfTries();
			final String errorMessage = reading.getErrorMessage();
			final int errorCode = reading.getErrorCode();

			int index = i;

			LOGGER.debug("ID {} TAPE {} POS {} CODE {} TRIES {} STATUS {} "
					+ "MESS {} FILE {}", new Object[] { queueId, tapename,
					position, errorCode, nbTries, statusId, errorMessage,
					filename });
			// Insert queue id
			statement.setInt(index++, queueId);
			// Insert cartridge
			statement.setString(index++, tapename);
			// Insert position.
			statement.setInt(index++, position);
			// Insert Error code
			statement.setInt(index++, errorCode);
			// Insert number of tries
			statement.setByte(index++, nbTries);
			// Insert File request Status
			statement.setShort(index++, statusId);
			// Insert message
			statement.setString(index++, errorMessage);
			// Insert file name
			statement.setString(index++, filename);

			statement.execute();
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		}

		LOGGER.trace("< processUpdate");
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO#setRequestStatusById(int,
	 * fr.in2p3.cc.storage.treqs.model.RequestStatus, int, java.lang.String)
	 */
	@Override
	public void setRequestStatusById(int id, final RequestStatus/* ! */status,
			int code, String message) throws TReqSException {
		LOGGER.trace("> setRequestStatusById");

		// XXX Bug: assert id >= 0;
		// XXX Bug: assert status != null;
		// XXX Bug: assert (message != null) && !message.equals("");

		final short statusId = status.getId();
		final ExecutionContext execCtx = new ExecutionContext();
		SQLWarning sqlWarn;

		try {
			ctx = new UserContext(DB2Broker.getInstance().getConnection());

			#sql [ctx, execCtx] { UPDATE DATA.REQUESTS SET STATUS = :statusId,
			    ERRORCODE = :code, MESSAGE = :message, END_TIME = CURRENT
			    TIMESTAMP WHERE ID = :id };
			if ((sqlWarn = execCtx.getWarnings()) != null) {
				LOGGER.warn("SQL Warning", sqlWarn);
			}
			if (execCtx.getUpdateCount() <= 0) {
				LOGGER.warn("Nothing updated");
			}
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		LOGGER.trace("< setRequestStatusById");
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO#update(fr.in2p3.cc.storage
	 * .treqs.model.Reading, fr.in2p3.cc.storage.treqs.model.RequestStatus)
	 */
	@Override
	public void update(Reading reading, final RequestStatus/* ! */status)
			throws TReqSException {
		LOGGER.trace("> update");

		// XXX Bug: assert reading != null;
		// XXX Bug: assert status != null;
		// XXX Bug: assert time != null;

		PreparedStatement statement = null;
		int index = 1;
		switch (status) {
		// The request has been sent to the HSM.
		case QUEUED:
			LOGGER.debug("Logging an activation for staging");
			statement = DB2Broker.getInstance().getPreparedStatement(
					DB2Statements.SQL_REQUESTS_UPDATE_REQUEST_QUEUED);
			break;
		// The request has been successfully staged.
		case STAGED:
			statement = DB2Broker.getInstance().getPreparedStatement(
					DB2Statements.SQL_REQUESTS_UPDATE_REQUEST_ENDED);
			LOGGER.debug("Logging a file final state with timestamp {}", System
					.currentTimeMillis());
			break;
		// The requests has been resubmitted due to a problem in space.
		case SUBMITTED:
			LOGGER.warn("Logging requeue of a file {}", reading.getMetaData()
					.getFile().getName());
			statement = DB2Broker.getInstance().getPreparedStatement(
					DB2Statements.SQL_REQUESTS_UPDATE_RESUBMITTED);
			break;
		// The request had a problem. Retrying.
		case CREATED: // CREATED corresponds to a retry
			statement = DB2Broker.getInstance().getPreparedStatement(
					DB2Statements.SQL_REQUESTS_UPDATE_REQUEST_RETRY);
			break;
		// The request has been failed due a problem calling the
		// staging.
		case FAILED:
			statement = DB2Broker.getInstance().getPreparedStatement(
					DB2Statements.SQL_REQUESTS_UPDATE_REQUEST_ENDED);
			LOGGER.debug("Logging a file final state with timestamp {}", System
					.currentTimeMillis());
			break;
		default:
			LOGGER.error("This state is invalid.");
			// XXX Bug: assert false;
			break;
		}
		this.processUpdate(reading, status, statement, index);

		LOGGER.trace("< update");
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * fr.in2p3.cc.storage.treqs.model.dao.ReadingDAO#updateUnfinishedRequests()
	 */
	@Override
	public int updateUnfinishedRequests() throws TReqSException {
		LOGGER.trace("> updateUnfinishedRequests");

		LOGGER.info("Cleaning unfinished requests");

		final short createdId = RequestStatus.CREATED.getId();
		final short submittedId = RequestStatus.SUBMITTED.getId();
		final short queuedId = RequestStatus.QUEUED.getId();
		int ret = 0;
		SQLWarning sqlWarn;
		try {
			ctx = new UserContext(DB2Broker.getInstance().getConnection());
			final ExecutionContext execCtx = ctx.getExecutionContext();
			#sql [ctx, execCtx] { UPDATE DATA.REQUESTS SET STATUS = :createdId
			    WHERE STATUS BETWEEN :submittedId AND :queuedId };
			if (((sqlWarn = execCtx.getWarnings()) != null)
					&& (sqlWarn.getErrorCode() != 100)) {
				LOGGER.warn("SQL Warning", sqlWarn);
			}
			ret = execCtx.getUpdateCount();
			if (ret <= 0) {
				LOGGER.warn("Nothing updated");
			}
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		// XXX Bug: assert ret >= 0;

		LOGGER.trace("< updateUnfinishedRequests");

		return ret;
	}
}
