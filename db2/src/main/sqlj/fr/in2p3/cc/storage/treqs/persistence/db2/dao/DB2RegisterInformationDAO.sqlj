/*
 * Copyright      Jonathan Schaeffer 2009-2010,
 *                  CC-IN2P3, CNRS <jonathan.schaeffer@cc.in2p3.fr>
 * Contributors   Andres Gomez,
 *                  CC-IN2P3, CNRS <andres.gomez@cc.in2p3.fr>
 *
 * This software is a computer program whose purpose is to schedule, sort
 * and submit file requests to the hierarchical storage system HPSS.
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights, and the successive licensors have only limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
package fr.in2p3.cc.storage.treqs.persistence.db2.dao;

import java.sql.SQLException;
import java.sql.SQLWarning;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ExecutionContext;
import fr.in2p3.cc.storage.treqs.TReqSException;
import fr.in2p3.cc.storage.treqs.model.dao.RegisterInformationDAO;
import fr.in2p3.cc.storage.treqs.persistence.db2.DB2Broker;
import fr.in2p3.cc.storage.treqs.persistence.db2.exception.DB2ExecuteException;

/**
 * Manages the inserts of the register information to DB2 database.
 *
 * @author Andres Gomez
 * @since 1.5.6
 */
public final class DB2RegisterInformationDAO implements RegisterInformationDAO {

	/**
	 * Logger.
	 */
	private static final Logger LOGGER = LoggerFactory
			.getLogger(DB2RegisterInformationDAO.class);

	// Declare a user context class.
	#sql static context UserContext;
	/**
	 * Connection context.
	 */
	private UserContext ctx;

	/**
	 * Iterator for the list of media.
	 */
	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * fr.in2p3.cc.storage.treqs.model.dao.RegisterInformationDAO#insert(java
	 * .lang.String, java.lang.String)
	 */
	@Override
	public void insert(final String /* ! */name, final String /* ! */value)
			throws TReqSException {
		LOGGER.trace("> insert {} {}", name, value);

		// XXX Bug: assert (name != null) && !name.equals("");
		// XXX Bug: assert (value != null) && !value.equals("");

		// TODO v1.5.6 Haer esto con un stored procedure

		ExecutionContext execCtx = new ExecutionContext();
		SQLWarning sqlWarn;
		String exist;
		try {
			ctx = new UserContext(DB2Broker.getInstance().getConnection());
			#sql [ctx, execCtx] { SELECT 'Y' INTO :exist FROM INFO.INFORMATIONS
			    WHERE NAME = :name FOR READ ONLY };
			// Uses the SQL code to see if to insert or to update.
			sqlWarn = execCtx.getWarnings();
			if ((sqlWarn == null) || (sqlWarn.getErrorCode() == 0)
					|| (sqlWarn.getErrorCode() == -811)) {
				// One or multiple entries
				if (sqlWarn != null) {
					LOGGER.debug("SQL code {}", sqlWarn.getErrorCode());
				}
				try {
					#sql [ctx, execCtx] { UPDATE INFO.INFORMATIONS SET VALUE =
					    :value WHERE NAME = :name };

					if ((sqlWarn = execCtx.getWarnings()) != null) {
						LOGGER.warn("SQL Warning", sqlWarn);
					}
					final int count = execCtx.getUpdateCount();
					if (count <= 0) {
						LOGGER.warn("Nothing updated");
					}
				} catch (final SQLException ex) {
					LOGGER.error("Error updating the registration of " + name
							+ ' ' + value);
					DB2Broker.handleSQLException(ex);
					throw new DB2ExecuteException(ex);
				}
			}
			// Nothing, just to remove the warning.
			exist.getBytes();
		} catch (final SQLException e) {
			if (e.getErrorCode() == 100) {
				// No entries
				try {
					#sql [ctx, execCtx] { INSERT INTO INFO.INFORMATIONS (NAME,
					    VALUE) VALUES (:name, :value) };
					if ((sqlWarn = execCtx.getWarnings()) != null) {
						LOGGER.warn("SQL Warning", sqlWarn);
					}
					final int count = execCtx.getUpdateCount();
					if (count <= 0) {
						LOGGER.warn("Nothing inserted");
					}
				} catch (final SQLException ex) {
					LOGGER.error("Error inserting the registration of " + name
							+ ' ' + value);
					DB2Broker.handleSQLException(ex);
					throw new DB2ExecuteException(ex);
				}
			} else if (e.getErrorCode() < 0) {
				// Houston, we have problems.
				LOGGER.warn("Problem at insert");
				DB2Broker.handleSQLException(e);
				throw new DB2ExecuteException(e);
			}
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		LOGGER.trace("< insert");
	}
}
