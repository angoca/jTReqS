/*
 * Copyright      Jonathan Schaeffer 2009-2010,
 *                  CC-IN2P3, CNRS <jonathan.schaeffer@cc.in2p3.fr>
 * Contributors   Andres Gomez,
 *                  CC-IN2P3, CNRS <andres.gomez@cc.in2p3.fr>
 *
 * This software is a computer program whose purpose is to schedule, sort
 * and submit file requests to the hierarchical storage system HPSS.
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights, and the successive licensors have only limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 */
package fr.in2p3.cc.storage.treqs.persistence.db2.dao;

import java.sql.SQLException;
import java.sql.SQLWarning;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sqlj.runtime.ConnectionContext;
import sqlj.runtime.ExecutionContext;
import sqlj.runtime.ref.DefaultContext;
import fr.in2p3.cc.storage.treqs.TReqSException;
import fr.in2p3.cc.storage.treqs.model.dao.WatchDogDAO;
import fr.in2p3.cc.storage.treqs.persistence.db2.DB2Broker;
import fr.in2p3.cc.storage.treqs.persistence.db2.exception.DB2ExecuteException;

/**
 * Implementation of the watchdog for DB2.
 *
 * @author Andres Gomez
 * @since 1.5.6
 */
public final class DB2WatchDogDAO implements WatchDogDAO {

	/**
	 * Logger.
	 */
	private static final Logger LOGGER = LoggerFactory
			.getLogger(DB2WatchDogDAO.class);

	/*
	 * (non-Javadoc)
	 *
	 * @see fr.in2p3.cc.storage.treqs.model.dao.WatchDogDAO#heartBeat()
	 */
	@Override
	public void heartBeat() throws TReqSException {
		LOGGER.trace("> heartBeat");

		DefaultContext ctx = null;
		try {
			ctx = new DefaultContext(DB2Broker.getInstance().getConnection());
			DefaultContext.setDefaultContext(ctx);
			SQLWarning sqlWarn;
			final ExecutionContext execCtx = ctx.getExecutionContext();
			#sql [execCtx] { UPDATE MON.HEART_BEAT SET LAST_TIME = CURRENT
			    TIMESTAMP };
			if (((sqlWarn = execCtx.getWarnings()) != null)
					&& (sqlWarn.getErrorCode() != 0)) {
				LOGGER.warn("SQL Warning", sqlWarn);
			}
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}

		LOGGER.trace("< heartBeat");
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see fr.in2p3.cc.storage.treqs.model.dao.WatchDogDAO#start(int)
	 */
	@Override
	public void start(final int pid) throws TReqSException {
		LOGGER.trace("> start");
		DefaultContext ctx = null;
		try {
			ctx = new DefaultContext(DB2Broker.getInstance().getConnection());
			DefaultContext.setDefaultContext(ctx);
			ExecutionContext execCtx = new ExecutionContext();
			SQLWarning sqlWarn;
			// TODO v1.5.6 Hacer esto con una función en la base de datos.
			// Deletes old register.
			#sql [execCtx] { DELETE FROM MON.HEART_BEAT };
			if ((sqlWarn = execCtx.getWarnings()) != null) {
				final int code = sqlWarn.getErrorCode();
				if ((code != 100) && (code != 0)) {
					LOGGER.warn("SQL Warning", sqlWarn);
				} else {
					// Inserts new pid.
					#sql [execCtx] { INSERT INTO MON.HEART_BEAT (PID, START_TIME,
					    LAST_TIME) VALUES (:pid, CURRENT TIMESTAMP, CURRENT
					    TIMESTAMP) };
					if ((sqlWarn = execCtx.getWarnings()) != null) {
						LOGGER.warn("SQL Warning", sqlWarn);
					}
				}
			}
		} catch (final SQLException ex) {
			DB2Broker.handleSQLException(ex);
			throw new DB2ExecuteException(ex);
		} finally {
			try {
				ctx.close(ConnectionContext.KEEP_CONNECTION);
			} catch (final SQLException ex) {
				DB2Broker.handleSQLException(ex);
				throw new DB2ExecuteException(ex);
			}
		}
		LOGGER.trace("< start");
	}
}
